design_task:
  description: >
    根據這裡描述的高階需求，為工程師準備詳細設計；
    一切都應在一個 python 模組中完成，但請列出該模組中的類別與方法。
    這裡是需求：{requirements}
    重要：只輸出 markdown 格式的設計，詳細列出模組中的類別與函式，並描述其功能。
  expected_output: >
    一份給工程師的詳細設計，明確指出模組中的類別與函式。
  agent: engineering_lead
  output_file: output/{module_name}_design.md

code_task:
  description: >
    撰寫一個 python 模組，實作工程主管所描述的設計，以達成需求。
    這裡是需求：{requirements}
  expected_output: >
    一個實作設計並達成需求的 python 模組。
    重要：只輸出原始 Python 程式碼，不要有任何 markdown 格式、程式碼區塊分隔符或反引號。
    輸出內容應為可直接儲存為檔案並執行的有效 Python 程式碼。
  agent: backend_engineer
  context:
    - design_task
  output_file: output/{module_name}

frontend_task:
  description: >
    在 app.py 模組中撰寫 gradio UI，展示 {module_name} 中指定的後端類別。
    假設只有 1 位使用者，UI 請保持非常簡單——僅作為原型或展示。
    這裡是需求：{requirements}
  expected_output: >
    一個在 app.py 模組中的 gradio UI，展示指定的後端類別。
    檔案應可直接執行，與後端模組放在同一目錄，並從 {module_name} 匯入後端類別。
    重要：只輸出原始 Python 程式碼，不要有任何 markdown 格式、程式碼區塊分隔符或反引號。
    輸出內容應為可直接儲存為檔案並執行的有效 Python 程式碼。
  agent: frontend_engineer
  context:
    - code_task
  output_file: output/app.py

test_task:
  description: >
    為指定的後端模組 {module_name} 撰寫單元測試，並在同一目錄建立 test_{module_name}。
  expected_output: >
    一個 test_{module_name} 模組，測試指定的後端模組。
    重要：只輸出原始 Python 程式碼，不要有任何 markdown 格式、程式碼區塊分隔符或反引號。
    輸出內容應為可直接儲存為檔案並執行的有效 Python 程式碼。
  agent: test_engineer
  context:
    - code_task
  output_file: output/test_{module_name}